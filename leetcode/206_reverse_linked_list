# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
       def _reverseList(curr: Optional[ListNode]):
            if curr.next is None:
                return curr
            else:
                head = _reverseList(curr.next)
                curr.next.next = curr
                return head
        if head:
            result = _reverseList(head)
            head.next = None

    def reverseList2(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or head.next is None:
            return head
        tail = head 
        curr = head.next
        tail.next = None

        while (curr.next is not None):
            next = curr.next
            curr.next = tail
            tail = curr
            curr = next
        curr.next = tail
        return curr


